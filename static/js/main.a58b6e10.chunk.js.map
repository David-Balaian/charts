{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","inputs","setInputs","dragging","setDragging","x","y","z","setZ","last_position","setlast_position","canvasRef","useRef","randomColor","color","i","Math","floor","random","draw","ctx","percents","clear","clearRect","endAlpha","startAlpha","beginPath","moveTo","lineTo","sin","PI","cos","closePath","fillStyle","fill","arc","stroke","reduce","total","item","j","length","className","map","input","key","placeholder","value","onChange","e","cloneInputs","currentSum","sum","console","log","alert","handleChange","target","onClick","push","onMouseDown","onMouseUp","onMouseMove","preventDefault","evt","deltaX","clientX","deltaY","clientY","abs","getMousePos","style","transform","position","ref","width","height","current","getContext","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a58b6e10.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [inputs, setInputs] = useState([25, 25, 25, 10])\n  const [dragging, setDragging] = useState(false);\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [z, setZ] = useState(0);\n  const [last_position, setlast_position] = useState({ x: 0, y: 0 })\n  let canvasRef = useRef();\n\n\n  const handleChange = (value, i) => {\n    if (typeof (+value) === \"number\" && value <= 100) {\n      let cloneInputs = [...inputs];\n      let currentSum = cloneInputs.reduce((total, item, j) => { if(i===j){return total}else{ return total + item}} ,0) \n      cloneInputs[i] = +value;\n      let sum = cloneInputs.reduce((total, item) =>  total + item )\n      console.log(sum, value, currentSum)\n      if(sum<=100){\n        setInputs(cloneInputs)\n      }else{\n        alert(`The sum of inputs can not be greater than 100 (Calculated max value is: ${100-currentSum}) `)\n      }\n    }\n  }\n\n  const addInput = () => {\n    let cloneInputs = [...inputs];\n    cloneInputs.push(\"\")\n    setInputs(cloneInputs)\n  }\n\n\n  const clearAll = () => {\n    setInputs(inputs.map(item => \"\"))\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    draw(ctx, inputs, true)\n  }\n\n\n  const randomColor = ()=>{\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n\n\n  const draw = (ctx, percents, clear = false)=>{\n    ctx.clearRect(0, 0, 300, 300);\n    let endAlpha = 0;\n    let startAlpha = 0;\n    let color;\n    if (clear) {\n      ctx.clearRect(0, 0, 300, 300);\n      return\n    }\n\n    for (let i = 0; i < percents.length; i++) {\n      if (percents[i]) {\n        color = randomColor()\n        endAlpha += 360 * percents[i] / 100;\n        ctx.beginPath();\n        ctx.moveTo(150, 150);\n        ctx.lineTo(150 + 150 * Math.sin(startAlpha * Math.PI / 180), 150 + 150 * Math.cos(startAlpha * Math.PI / 180));\n        ctx.moveTo(150, 150);\n        ctx.lineTo(150 + 150 * Math.sin(endAlpha * Math.PI / 180), 150 + 150 * Math.cos(endAlpha * Math.PI / 180));\n        ctx.closePath()\n        ctx.fillStyle = color;\n        ctx.fill()\n        ctx.beginPath()\n        ctx.arc(150, 150, 150, 360 * Math.PI / 180 - startAlpha * Math.PI / 180 + Math.PI / 2, 360 * Math.PI / 180 - endAlpha * Math.PI / 180 + Math.PI / 2, true);\n        ctx.lineTo(150, 150);\n        ctx.closePath();\n        ctx.fillStyle = color;\n        ctx.fill()\n        ctx.stroke()\n        startAlpha = 360 * percents.reduce((total, item, j) => { if (j <= i) { return total + item } else { return total } }) / 100\n      }\n    };\n  }\n\n\n  function getMousePos(evt) {\n    if (dragging) {\n      var deltaX = last_position.x - evt.clientX,\n        deltaY = last_position.y - evt.clientY;\n      if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > 0) {\n        console.log(\"left\")\n        setZ(z + 5)\n      } else if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX < 0) {\n        setZ(z - 5)\n      }\n\n\n      setlast_position({\n        x: evt.clientX,\n        y: evt.clientY\n      });\n    } else {\n      return\n    }\n  }\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"inputs\" >\n        {inputs.map((input, i) => {\n          return <input className=\"input\" key={i}  placeholder=\"Percent\" value={input} onChange={(e) => { handleChange(e.target.value, i) }} />\n        })}\n        <button className=\"button\" onClick={addInput} > Add Input </button>\n\n      </div>\n\n\n      <div className=\"scene\"  onMouseDown={() => { setDragging(true) }} onMouseUp={() => { setDragging(false) }} onMouseMove={(e) => { e.preventDefault(); getMousePos(e) }}>\n        <div className=\"sphere\" style={{ transform: `rotateZ(${z}deg) rotateX(${x}deg) rotateY(${y}deg)` }}>\n          <canvas style={{ position: \"fixed\" }} ref={canvasRef} width=\"300\" height=\"300\"  >\n          </canvas>\n          <div className=\"hemisphere\">\n          </div>\n          <div className=\"hemisphere\">\n          </div>\n        </div>\n      </div>\n      <div className=\"inputs\">\n      <button className=\"button\" onClick={() => {\n          const canvas = canvasRef.current\n          const ctx = canvas.getContext('2d')\n          draw(ctx, inputs)\n        }} > Get Percent </button>\n        <button className=\"button\" onClick={clearAll} > Clear </button>\n    </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}